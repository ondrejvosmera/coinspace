{"ast":null,"code":"var _jsxFileName = \"/Users/ondrejvosmera/Desktop/coinspace/src/components/CoinInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { HistoricalChart, SingleCoin } from '../config/api.js';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { chartDays } from '../config/chartData.js';\nimport ChartButtons from './ChartButtons.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst CoinInfo = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [coin, setCoin] = useState();\n  const [historicalData, setHistoricalData] = useState();\n  const [days, setDays] = useState(1);\n  const fetchCoin = async () => {\n    try {\n      const response = await fetch(SingleCoin(id));\n      if (response.ok) {\n        const data = await response.json();\n        setCoin(data);\n      } else {\n        console.error('Failed to fetch ticker tape data');\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchCoin();\n  }, [days]);\n  const fetchHistoricalData = async () => {\n    try {\n      const response = await fetch(HistoricalChart(id, days));\n      if (response.ok) {\n        const data = await response.json();\n        setHistoricalData(data.prices);\n      } else {\n        console.error('Failed to fetch Historical data');\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchHistoricalData();\n  }, [days]);\n  if (!coin || !historicalData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 14\n    }, this);\n  }\n  const getBorderColor = name => {\n    const colorMapping = {\n      bitcoin: \"#FFA500\",\n      ethereum: \"#48CBD9\",\n      tether: \"#26A17B\",\n      bnb: \"#F3BA2F\",\n      xrp: \"#FFFFFF\",\n      solana: \"#00FFA3\",\n      cardano: \"#0033AD\",\n      dogecoin: \"#E1B303\",\n      tron: \"#D1001F\"\n    };\n    return colorMapping[name.toLowerCase()] || \"#00BCE3\";\n  };\n  function formatText(text) {\n    // Remove HTML tags from the text\n    const textWithoutHTML = text.replace(/<\\/?[^>]+(>|$)/g, '');\n\n    // Split the text into an array of sentences\n    const sentences = textWithoutHTML.split(/(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s/);\n\n    // Take the first 5 sentences\n    const limitedText = sentences.slice(0, 5).join(' ');\n    return limitedText;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-info-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: coin.image.large,\n          alt: coin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title\",\n          children: coin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"coin-ticker\",\n          children: coin.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"coin-price\",\n        children: [\"$\", coin.market_data.current_price.usd.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"coin-mcap\",\n        children: [\"Market cap: $\", coin.market_data.market_cap.usd.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: limitText(coin.description.en)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-col\",\n      children: !historicalData ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-buttons\",\n          children: chartDays.map(day => /*#__PURE__*/_jsxDEV(ChartButtons, {\n            OnClick: () => setDays(day.value),\n            selected: day.value === days,\n            children: day.label\n          }, day.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          className: \"chart\",\n          data: {\n            labels: historicalData.map(coin => {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12} : ${date.getMinutes()} PM` : `${date.getHours()} : ${date.getMinutes()} AM`;\n              return days === 1 ? time : date.toLocaleDateString();\n            }),\n            datasets: [{\n              data: historicalData.map(coin => coin[1]),\n              label: `Price (Past ${days} Days)`,\n              borderColor: getBorderColor(coin.name)\n            }]\n          },\n          options: {\n            elements: {\n              point: {\n                radius: 1\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(CoinInfo, \"E0qjKOYpG+KvQe1CoARWbmPHET4=\", false, function () {\n  return [useParams];\n});\n_c = CoinInfo;\nexport default CoinInfo;\nvar _c;\n$RefreshReg$(_c, \"CoinInfo\");","map":{"version":3,"names":["React","useEffect","useState","useParams","HistoricalChart","SingleCoin","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","chartDays","ChartButtons","jsxDEV","_jsxDEV","Fragment","_Fragment","register","CoinInfo","_s","id","coin","setCoin","historicalData","setHistoricalData","days","setDays","fetchCoin","response","fetch","ok","data","json","console","error","fetchHistoricalData","prices","children","fileName","_jsxFileName","lineNumber","columnNumber","getBorderColor","name","colorMapping","bitcoin","ethereum","tether","bnb","xrp","solana","cardano","dogecoin","tron","toLowerCase","formatText","text","textWithoutHTML","replace","sentences","split","limitedText","slice","join","className","src","image","large","alt","symbol","market_data","current_price","usd","toLocaleString","market_cap","limitText","description","en","map","day","OnClick","value","selected","label","labels","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","borderColor","options","elements","point","radius","_c","$RefreshReg$"],"sources":["/Users/ondrejvosmera/Desktop/coinspace/src/components/CoinInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { HistoricalChart, SingleCoin } from '../config/api.js';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { chartDays } from '../config/chartData.js';\nimport ChartButtons from './ChartButtons.jsx';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n\nconst CoinInfo = () => {\n\n    const { id } = useParams();\n    const [coin, setCoin] = useState()\n    const [historicalData, setHistoricalData] = useState();\n    const [days, setDays] = useState(1);\n  \n    const fetchCoin = async () => {\n      try {\n        const response = await fetch(SingleCoin(id));\n        if (response.ok) {\n          const data = await response.json();\n          setCoin(data);\n        } else {\n          console.error('Failed to fetch ticker tape data');\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n  \n    useEffect(() => {\n      fetchCoin();\n    }, [days]);\n\n    const fetchHistoricalData = async () => {\n      try {\n        const response = await fetch(HistoricalChart(id, days));\n        if (response.ok) {\n          const data = await response.json();\n          setHistoricalData(data.prices);\n        } else {\n          console.error('Failed to fetch Historical data');\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n\n    useEffect(() => {\n      fetchHistoricalData();\n    }, [days]);\n\n    if (!coin || !historicalData) {\n      return <div>Loading...</div>;\n    }\n\n    const getBorderColor = (name) => {\n      const colorMapping = {\n        bitcoin: \"#FFA500\",\n        ethereum: \"#48CBD9\",\n        tether: \"#26A17B\",\n        bnb: \"#F3BA2F\",\n        xrp: \"#FFFFFF\",\n        solana: \"#00FFA3\",\n        cardano: \"#0033AD\",\n        dogecoin: \"#E1B303\",\n        tron: \"#D1001F\"\n      };\n    \n      return colorMapping[name.toLowerCase()] || \"#00BCE3\";\n    };\n\n    function formatText(text) {\n      // Remove HTML tags from the text\n      const textWithoutHTML = text.replace(/<\\/?[^>]+(>|$)/g, '');\n    \n      // Split the text into an array of sentences\n      const sentences = textWithoutHTML.split(/(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s/);\n    \n      // Take the first 5 sentences\n      const limitedText = sentences.slice(0, 5).join(' ');\n    \n      return limitedText;\n    }\n\n  return (\n    <div className=\"coin-info-container\">\n      <div className=\"left-col\">\n        <div className=\"coin-title\">\n\n          <img src={coin.image.large} alt={coin.name} />\n          <h2 className='title'>{coin.name}</h2>\n          <p className='coin-ticker'>{coin.symbol}</p>\n        </div>\n        <p className='coin-price'>${coin.market_data.current_price.usd.toLocaleString()}</p>\n        <p className='coin-mcap'>Market cap: ${coin.market_data.market_cap.usd.toLocaleString()}</p>\n        <p>{limitText(coin.description.en)}</p>\n      </div>\n      <div className=\"right-col\">\n        {\n          !historicalData ? (<p>Loading...</p>\n          ) : (\n          <>\n          <div className='chart-buttons'>\n            {chartDays.map((day) => (\n              <ChartButtons key={day.value} OnClick={() => setDays(day.value)} selected={day.value === days}>\n                {day.label}\n              </ChartButtons>\n            ))}\n          </div>\n          <Line\n          className='chart'\n          data = {{\n            labels: historicalData.map((coin) => {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12\n              ? `${date.getHours() - 12} : ${date.getMinutes()} PM`\n              : `${date.getHours()} : ${date.getMinutes()} AM`\n\n              return days === 1 ? time : date.toLocaleDateString()\n            }),\n\n            datasets: [\n              {\n                data: historicalData.map((coin) => coin[1]),\n                label: `Price (Past ${days} Days)`,\n                borderColor: getBorderColor(coin.name),\n                \n              }\n            ]\n          }}\n          options={{\n            elements: {\n              point: {\n                radius: 1,\n              }\n            }\n          }}\n          />\n          </>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default CoinInfo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}